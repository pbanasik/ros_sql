#!/usr/bin/env python3
import argparse
import sqlalchemy
import yaml

try:
    import progressbar
    have_progressbar = True
except ImportError:
    have_progressbar = False

import roslib
roslib.load_manifest('ros_sql')
import rospy
import rosbag
import ros_sql.session
import ros_sql.ros2sql as ros2sql
import ros_sql.factories as factories
import ros_sql.util as util

class _FakeProgress:
    def __init__(self,maxval):
        self._maxval = maxval
    def update(self,n):
        print "%s/%s" % (n,self._maxval)
    def finish(self):
        pass

class DBConnection:
    def __init__(self, bind_url_cli):
        bind_url = util.get_bind_url( bind_url_cli )
        engine = sqlalchemy.create_engine(bind_url)
        rospy.loginfo('saving to %r'%bind_url)
        self.metadata = sqlalchemy.MetaData(bind=engine)
        self.session = ros_sql.session.get_session(self.metadata)

    def close(self):
        pass #??

class BagToSQL:
    def __init__(self,dbconnection,bag_fname,show_progress=False,prefix=None):
        self.show_progress = show_progress
        self.prefix=prefix
        self.metadata = dbconnection.metadata
        self.session = dbconnection.session

        self.bag_fname = bag_fname
        self.bag = rosbag.Bag(bag_fname,mode='r')
    def run(self):
        if self.show_progress:
            infostr = self.bag._get_yaml_info()
            info = yaml.load( infostr )
            maxval = info['messages']

            if have_progressbar:
                widgets = ["%s: " % self.bag_fname, progressbar.Counter(), progressbar.Percentage(),
                           progressbar.Bar(), progressbar.ETA()]
                pbar = progressbar.ProgressBar(widgets=widgets,maxval=maxval).start()
            else:
                pbar = _FakeProgress(maxval=maxval)

        topic2msg_class = {}

        for count, (topic, msg, t) in enumerate(self.bag.read_messages()):
            if self.show_progress:
                pbar.update(count)

            if topic not in topic2msg_class:
                msg_class = msg.__class__
                ros2sql.add_schemas(self.session, self.metadata,
                                    [(topic,msg_class)],
                                    prefix=self.prefix)
                topic2msg_class[topic] = msg_class

            factories.msg2sql(self.session, self.metadata,
                              topic,
                              msg,
                              timestamp=t,
                              prefix=self.prefix,
                              )
        if self.show_progress:
            pbar.finish()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename',type=str,
                        help='filename of bag file', nargs='*')
    parser.add_argument('-b','--bind',type=str,
                        help='sqlalchemy URL for database connection')
    parser.add_argument('-p','--prefix',type=str,
                        help='prefix to add to table names')
    parser.add_argument('--profile',action='store_true',
                        help='save execution profile')
    parser.add_argument('--progress',action='store_true',
                        help='display progress')

    # use argparse, but only after ROS did its thing
    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    dbconn = DBConnection(args.bind)
    for filename in args.filename:
        k = BagToSQL(dbconn, filename, prefix=args.prefix, show_progress=args.progress)
        if not args.profile:
            k.run()
        else:
            import cProfile
            out_stats_filename = 'bag_to_sql.profile'
            print 'profiling, stats will be saved to %r'%out_stats_filename
            cProfile.runctx('k.run()',
                            globals(), locals(), out_stats_filename)
    dbconn.close()

if __name__=='__main__':
    main()
