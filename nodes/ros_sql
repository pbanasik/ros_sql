#!/usr/bin/env python3
import argparse
import sys, time
import queue
import socket
import sqlalchemy
import numpy as np

import roslib
roslib.load_manifest('ros_sql')
import rospy
import ros_sql.session
import ros_sql.models as models
import ros_sql.ros2sql as ros2sql
import ros_sql.factories as factories
import ros_sql.util as util
import rostopic
import rosgraph.masterapi

class Recorder:
    def __init__(self,topics,bind_url_cli,prefix,all=False):
        rospy.init_node('sql_recorder', anonymous=True)

        topics = util.get_topics(topics)
        if not len(topics) and not all:
            print >> sys.stderr, 'Neither --all nor individual topic name(s) given. Nothing to do.'
            sys.exit(1)

        self.prefix = util.get_prefix(prefix)
        self.toplevel_columns = util.get_toplevel_columns()

        bind_url = util.get_bind_url( bind_url_cli )
        engine = sqlalchemy.create_engine(bind_url,
                                          echo=rospy.get_param('~echo',False))
        rospy.loginfo('saving to %r'%bind_url)

        self.metadata = sqlalchemy.MetaData(bind=engine)
        self.session = ros_sql.session.get_session(self.metadata)

        self.topics = topics
        self.subscribed_topics = []
        self.record_all = all

        if self.record_all:
            rospy.loginfo('saving all topics')
            assert len(self.topics)==0
        else:
            rospy.loginfo('saving topics %r'%self.topics)

        self.q = queue.Queue()

        self._do_check_master = False

        self.check_master()
        rospy.Timer(rospy.Duration(1.0), self.do_check_master)

    def do_check_master(self,*args):
        # schedule a call to self.check_master() in the main thread
        self._do_check_master = True

    def check_master(self,*args):
        new_topics = []

        master = rosgraph.masterapi.Master('/rostopic')
        try:
            state = master.getSystemState()
            pubs, subs, _ = state
            for t, l in pubs:
                if self.record_all or t in self.topics:
                    new_topics.append(t)
        except socket.error:
            raise rostopic.ROSTopicIOException(
                "Unable to communicate with master!")

        topic2msg_class = {}
        for topic in new_topics:
            if topic in self.subscribed_topics:
                continue
            msg_class, _, _ = \
                       rostopic.get_topic_class(topic, blocking=True)

            try:
                ros2sql.add_schemas(self.session, self.metadata,
                                    [(topic,msg_class)],
                                    prefix=self.prefix,
                                    toplevel_columns=self.toplevel_columns,
                                    )
            except ros2sql.MetadataChangedError as err:
                rospy.logerr( str(err) )
                continue
            topic2msg_class[topic] = msg_class

        for topic in topic2msg_class:
            rospy.loginfo('subscribing to topic: %r'%topic)

            msg_class = topic2msg_class[topic]
            rospy.Subscriber( topic, msg_class, callback=self.cb,
                              callback_args=topic)
            self.subscribed_topics.append( topic )
        self._do_check_master = False

    def cb(self, msg, topic):
        now = rospy.get_rostime()
        self.q.put( (now,msg,topic) )

    def run(self):
        while not rospy.is_shutdown():
            try:
                # Block but timeout so we handle SIGINT (Ctrl-C).
                (now,msg,topic) = self.q.get(block=True,timeout=0.1)
            except queue.Empty:
                pass
            else:
                factories.msg2sql(self.session, self.metadata,
                                  topic,
                                  msg,
                                  timestamp=now,
                                  prefix=self.prefix,
                                  toplevel_columns=self.toplevel_columns,
                                  )
            if self._do_check_master:
                self.check_master()

def record(args):
    if args.all and len(args.topic):
        print >> sys.stderr, 'Use of --all and individual topic names mutually exclusive'
        sys.exit(1)
    r = Recorder(args.topic,args.bind,args.prefix,all=args.all)
    r.run()

class Player:
    def __init__(self,bind_url_cli,prefix,loop=False):
        rospy.init_node('sql_player', anonymous=True)

        self.prefix = util.get_prefix(prefix)

        bind_url = util.get_bind_url( bind_url_cli )
        engine = sqlalchemy.create_engine(bind_url)#,echo=True)
        rospy.loginfo('playing from %r'%bind_url)

        self.metadata = sqlalchemy.MetaData(bind=engine)
        self.metadata.reflect(engine)
        self.session = ros_sql.session.get_session(self.metadata)

        self.conn = self.metadata.bind.connect()

        self.loop = loop

        all_metadata = self.session.query( models.RosSqlMetadata).all()
        self.meta=dict([(row.topic_name, row) for row in all_metadata if row.is_top])
        if self.prefix is not None:
            self.meta=dict([(t,self.meta[t]) for t in self.meta
                            if self.meta[t].prefix==self.prefix])
        if len(self.meta)==0:
            # nothing to do
            sys.exit(0)
        func=factories.get_sql_table
        self.tables = dict([ (t,func(self.session,self.metadata,t))
                             for t in self.meta])
        lt = max( [len(t) for t in self.meta])
        s=[self._get_timestamps(self.tables[t],self.meta[t].pk_name,t,lt)
           for t in self.meta]
        timestamps = np.concatenate([i for i in s if i is not None])
        self.timestamps = np.sort( timestamps )

        self.pub = {}
        for topic in self.meta:
            msg_class_name = self.meta[topic].msg_class_name
            MsgClass = util.get_msg_class(msg_class_name)
            self.pub[topic] = rospy.Publisher( topic, MsgClass )

    def _get_timestamps(self, tt, pk_name, topic, lt, sorted=False ):
        t_secs  = models.ROS_TOP_TIMESTAMP_COLNAME_BASE+ '_secs'
        t_nsecs = models.ROS_TOP_TIMESTAMP_COLNAME_BASE+'_nsecs'
        if sorted:
            c_secs = getattr( tt.c, t_secs)
            c_nsecs = getattr( tt.c, t_nsecs)
            s=sqlalchemy.sql.select([tt]).\
               order_by( c_secs.asc(),c_nsecs.asc() )
        else:
            s=sqlalchemy.sql.select([tt])
        sa_result = self.conn.execute(s)
        result_sql = sa_result.fetchall()
        sa_result.close()
        if len(result_sql) == 0:
            return None

        # create numpy structured array of results
        ts = []; keys = []
        for row in result_sql:
            ts.append(getattr(row,t_secs) + getattr(row,t_nsecs)*1e-9)
            keys.append(getattr(row,pk_name))
        ts = np.array(ts); keys = np.array(keys)
        topics = np.array( [topic]*len(ts) )
        dtype = [('timestamp',ts.dtype),
                 ('key',keys.dtype),
                 ('topic','S'+str(lt))]
        results = np.empty( (len(ts),), dtype=dtype)
        results['timestamp']=ts
        results['key']=keys
        results['topic']=topics
        return results

    def run(self):
        while 1:
            for idx, next_row_info in enumerate(self.timestamps):
                topic = next_row_info['topic']
                table = self.tables[ topic ]
                meta = self.meta[ topic ]
                pk_col = getattr(table.c,meta.pk_name)
                key = next_row_info['key']
                # convert from numpy to pure python
                if np.issubdtype(key,str):
                    key = str(key)
                else:
                    key = int(key)
                s=sqlalchemy.sql.select([table]).\
                   where(pk_col==key)
                sa_result = self.conn.execute(s)
                result_sql = sa_result.fetchone()
                sa_result.close()

                next_msg = factories.sql2msg( topic, result_sql, self.session, self.metadata, prefix=self.prefix )['msg']

                now = time.time()
                if idx==0:
                    offset = now-next_row_info['timestamp']

                scheduled_time = next_row_info['timestamp']+offset
                while now < scheduled_time:
                    wait_time = scheduled_time-now
                    time.sleep( wait_time )
                    now = time.time()

                self.pub[topic].publish( next_msg )

            if not self.loop:
                break

def play(args):
    p = Player(args.bind,args.prefix,loop=args.loop)
    p.run()

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands')

    # ------ record --------------
    parser_record = subparsers.add_parser('record',
                                          help='record ros topics to SQL')
    parser_record.add_argument('-a','--all',action='store_true',default=False,
                               help='record all topics')
    parser_record.add_argument('-b','--bind',type=str,
                               help='sqlalchemy URL for database connection')
    parser_record.add_argument('topic', nargs='*',
                               help='topic name(s) to be recorded')
    parser_record.add_argument('-p','--prefix',type=str,
                               help='prefix to add to table names')
    parser_record.set_defaults(func=record)

    # ------ play --------------
    parser_play = subparsers.add_parser('play',
                                        help='play SQL to ROS')
    parser_play.add_argument('-b','--bind',type=str,
                               help='sqlalchemy URL for database connection')
    parser_play.add_argument('-l','--loop',action='store_true',
                               help='loop playback')
    parser_play.add_argument('-p','--prefix',type=str,
                               help='prefix to filter table names')
    parser_play.set_defaults(func=play)

    # ----------------------------

    # use argparse, but only after ROS did its thing
    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    try:
        func = args.func
    except AttributeError:
        parser.error("too few arguments")
    func(args)

if __name__=='__main__':
    main()
